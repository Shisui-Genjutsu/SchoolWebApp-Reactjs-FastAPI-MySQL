{"ast":null,"code":"import { invariant } from '../../../utils/errors.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n  const match = cssVariableRegex.exec(current);\n  if (!match) return [,];\n  const [, token, fallback] = match;\n  return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n  const [token, fallback] = parseCSSVariable(current);\n  // No CSS variable detected\n  if (!token) return;\n  // Attempt to read this CSS variable off the element\n  const resolved = window.getComputedStyle(element).getPropertyValue(token);\n  if (resolved) {\n    return resolved.trim();\n  } else if (isCSSVariableToken(fallback)) {\n    // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n    return getVariableValue(fallback, element, depth + 1);\n  } else {\n    return fallback;\n  }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _ref, transitionEnd) {\n  let {\n    ...target\n  } = _ref;\n  const element = visualElement.current;\n  if (!(element instanceof Element)) return {\n    target,\n    transitionEnd\n  };\n  // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n  // only if they change but I think this reads clearer and this isn't a performance-critical path.\n  if (transitionEnd) {\n    transitionEnd = {\n      ...transitionEnd\n    };\n  }\n  // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n  visualElement.values.forEach(value => {\n    const current = value.get();\n    if (!isCSSVariableToken(current)) return;\n    const resolved = getVariableValue(current, element);\n    if (resolved) value.set(resolved);\n  });\n  // Cycle through every target property and resolve CSS variables. Currently\n  // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n  for (const key in target) {\n    const current = target[key];\n    if (!isCSSVariableToken(current)) continue;\n    const resolved = getVariableValue(current, element);\n    if (!resolved) continue;\n    // Clone target if it hasn't already been\n    target[key] = resolved;\n    if (!transitionEnd) transitionEnd = {};\n    // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n    // CSS variable. This will ensure that after the animation the component will reflect\n    // changes in the value of the CSS variable.\n    if (transitionEnd[key] === undefined) {\n      transitionEnd[key] = current;\n    }\n  }\n  return {\n    target,\n    transitionEnd\n  };\n}\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };","map":{"version":3,"names":["invariant","isCSSVariableToken","cssVariableRegex","parseCSSVariable","current","match","exec","token","fallback","maxDepth","getVariableValue","element","depth","arguments","length","undefined","resolved","window","getComputedStyle","getPropertyValue","trim","resolveCSSVariables","visualElement","_ref","transitionEnd","target","Element","values","forEach","value","get","set","key"],"sources":["D:/LEARNING/projects/SchoolWebApplication/frontend/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs"],"sourcesContent":["import { invariant } from '../../../utils/errors.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}