{"ast":null,"code":"function createRenderStep(runNextFrame) {\n  /**\n   * We create and reuse two arrays, one to queue jobs for the current frame\n   * and one for the next. We reuse to avoid triggering GC after x frames.\n   */\n  let toRun = [];\n  let toRunNextFrame = [];\n  /**\n   *\n   */\n  let numToRun = 0;\n  /**\n   * Track whether we're currently processing jobs in this step. This way\n   * we can decide whether to schedule new jobs for this frame or next.\n   */\n  let isProcessing = false;\n  let flushNextFrame = false;\n  /**\n   * A set of processes which were marked keepAlive when scheduled.\n   */\n  const toKeepAlive = new WeakSet();\n  const step = {\n    /**\n     * Schedule a process to run on the next frame.\n     */\n    schedule: function (callback) {\n      let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      const addToCurrentFrame = immediate && isProcessing;\n      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n      if (keepAlive) toKeepAlive.add(callback);\n      // If the buffer doesn't already contain this callback, add it\n      if (buffer.indexOf(callback) === -1) {\n        buffer.push(callback);\n        // If we're adding it to the currently running buffer, update its measured size\n        if (addToCurrentFrame && isProcessing) numToRun = toRun.length;\n      }\n      return callback;\n    },\n    /**\n     * Cancel the provided callback from running on the next frame.\n     */\n    cancel: callback => {\n      const index = toRunNextFrame.indexOf(callback);\n      if (index !== -1) toRunNextFrame.splice(index, 1);\n      toKeepAlive.delete(callback);\n    },\n    /**\n     * Execute all schedule callbacks.\n     */\n    process: frameData => {\n      /**\n       * If we're already processing we've probably been triggered by a flushSync\n       * inside an existing process. Instead of executing, mark flushNextFrame\n       * as true and ensure we flush the following frame at the end of this one.\n       */\n      if (isProcessing) {\n        flushNextFrame = true;\n        return;\n      }\n      isProcessing = true;\n      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n      // Clear the next frame list\n      toRunNextFrame.length = 0;\n      // Execute this frame\n      numToRun = toRun.length;\n      if (numToRun) {\n        for (let i = 0; i < numToRun; i++) {\n          const callback = toRun[i];\n          callback(frameData);\n          if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n          }\n        }\n      }\n      isProcessing = false;\n      if (flushNextFrame) {\n        flushNextFrame = false;\n        step.process(frameData);\n      }\n    }\n  };\n  return step;\n}\nexport { createRenderStep };","map":{"version":3,"names":["createRenderStep","runNextFrame","toRun","toRunNextFrame","numToRun","isProcessing","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","arguments","length","undefined","immediate","addToCurrentFrame","buffer","add","indexOf","push","cancel","index","splice","delete","process","frameData","i","has"],"sources":["D:/LEARNING/projects/SchoolWebApplication/frontend/node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs"],"sourcesContent":["function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"mappings":"AAAA,SAASA,gBAAgBA,CAACC,YAAY,EAAE;EACpC;AACJ;AACA;AACA;EACI,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,cAAc,GAAG,EAAE;EACvB;AACJ;AACA;EACI,IAAIC,QAAQ,GAAG,CAAC;EAChB;AACJ;AACA;AACA;EACI,IAAIC,YAAY,GAAG,KAAK;EACxB,IAAIC,cAAc,GAAG,KAAK;EAC1B;AACJ;AACA;EACI,MAAMC,WAAW,GAAG,IAAIC,OAAO,EAAE;EACjC,MAAMC,IAAI,GAAG;IACT;AACR;AACA;IACQC,QAAQ,EAAE,SAAAA,CAACC,QAAQ,EAA2C;MAAA,IAAzCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MACrD,MAAMI,iBAAiB,GAAGD,SAAS,IAAIX,YAAY;MACnD,MAAMa,MAAM,GAAGD,iBAAiB,GAAGf,KAAK,GAAGC,cAAc;MACzD,IAAIS,SAAS,EACTL,WAAW,CAACY,GAAG,CAACR,QAAQ,CAAC;MAC7B;MACA,IAAIO,MAAM,CAACE,OAAO,CAACT,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACjCO,MAAM,CAACG,IAAI,CAACV,QAAQ,CAAC;QACrB;QACA,IAAIM,iBAAiB,IAAIZ,YAAY,EACjCD,QAAQ,GAAGF,KAAK,CAACY,MAAM;MAC/B;MACA,OAAOH,QAAQ;IACnB,CAAC;IACD;AACR;AACA;IACQW,MAAM,EAAGX,QAAQ,IAAK;MAClB,MAAMY,KAAK,GAAGpB,cAAc,CAACiB,OAAO,CAACT,QAAQ,CAAC;MAC9C,IAAIY,KAAK,KAAK,CAAC,CAAC,EACZpB,cAAc,CAACqB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;MACnChB,WAAW,CAACkB,MAAM,CAACd,QAAQ,CAAC;IAChC,CAAC;IACD;AACR;AACA;IACQe,OAAO,EAAGC,SAAS,IAAK;MACpB;AACZ;AACA;AACA;AACA;MACY,IAAItB,YAAY,EAAE;QACdC,cAAc,GAAG,IAAI;QACrB;MACJ;MACAD,YAAY,GAAG,IAAI;MACnB,CAACH,KAAK,EAAEC,cAAc,CAAC,GAAG,CAACA,cAAc,EAAED,KAAK,CAAC;MACjD;MACAC,cAAc,CAACW,MAAM,GAAG,CAAC;MACzB;MACAV,QAAQ,GAAGF,KAAK,CAACY,MAAM;MACvB,IAAIV,QAAQ,EAAE;QACV,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,QAAQ,EAAEwB,CAAC,EAAE,EAAE;UAC/B,MAAMjB,QAAQ,GAAGT,KAAK,CAAC0B,CAAC,CAAC;UACzBjB,QAAQ,CAACgB,SAAS,CAAC;UACnB,IAAIpB,WAAW,CAACsB,GAAG,CAAClB,QAAQ,CAAC,EAAE;YAC3BF,IAAI,CAACC,QAAQ,CAACC,QAAQ,CAAC;YACvBV,YAAY,EAAE;UAClB;QACJ;MACJ;MACAI,YAAY,GAAG,KAAK;MACpB,IAAIC,cAAc,EAAE;QAChBA,cAAc,GAAG,KAAK;QACtBG,IAAI,CAACiB,OAAO,CAACC,SAAS,CAAC;MAC3B;IACJ;EACJ,CAAC;EACD,OAAOlB,IAAI;AACf;AAEA,SAAST,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}