{"ast":null,"code":"import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...transition\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n      if (appearId) {\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n      }\n    }\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    const animation = value.animation;\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(() => willChange.remove(key));\n    }\n    animations.push(animation);\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["sync","transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","shouldBlockAnimation","_ref","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","definition","delay","transitionOverride","type","arguments","length","undefined","transition","getDefaultTransition","transitionEnd","target","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","animationState","getState","value","valueTarget","valueTransition","elapsed","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all"],"sources":["D:/LEARNING/projects/SchoolWebApplication/frontend/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}