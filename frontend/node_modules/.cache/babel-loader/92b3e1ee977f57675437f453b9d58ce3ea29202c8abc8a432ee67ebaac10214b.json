{"ast":null,"code":"import { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\nfunction createAnimationsFromSequence(sequence) {\n  let {\n    defaultTransition = {},\n    ...sequenceTransition\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let scope = arguments.length > 2 ? arguments[2] : undefined;\n  const animationDefinitions = new Map();\n  const sequences = new Map();\n  const elementCache = {};\n  const timeLabels = new Map();\n  let prevTime = 0;\n  let currentTime = 0;\n  let totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the sequence array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n  for (let i = 0; i < sequence.length; i++) {\n    const segment = sequence[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n    if (typeof segment === \"string\") {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n    let [subject, keyframes, transition = {}] = segment;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n    if (transition.at !== undefined) {\n      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n    let maxDuration = 0;\n    const resolveValueSequence = function (valueKeyframes, valueTransition, valueSequence) {\n      let elementIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      let numElements = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n      const {\n        duration = defaultTransition.duration || 0.3,\n        ease = defaultTransition.ease || \"easeOut\"\n      } = valueTransition;\n      const delay = typeof valueTransition.delay === \"function\" ? valueTransition.delay(elementIndex, numElements) : valueTransition.delay || 0;\n      const startTime = currentTime + delay;\n      const targetTime = startTime + duration;\n      const {\n        times = defaultOffset(valueKeyframesAsList)\n      } = valueTransition;\n      /**\n       * If there's only one time offset of 0, fill in a second with length 1\n       */\n      if (times.length === 1 && times[0] === 0) {\n        times[1] = 1;\n      }\n      /**\n       * Fill out if offset if fewer offsets than keyframes\n       */\n      const remainder = times.length - valueKeyframesAsList.length;\n      remainder > 0 && fillOffset(times, remainder);\n      /**\n       * If only one value has been set, ie [1], push a null to the start of\n       * the keyframe array. This will let us mark a keyframe at this point\n       * that will later be hydrated with the previous value.\n       */\n      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n      /**\n       * Add keyframes, mapping offsets to absolute time.\n       */\n      addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n      maxDuration = Math.max(delay + duration, maxDuration);\n      totalDuration = Math.max(targetTime, totalDuration);\n    };\n    if (isMotionValue(subject)) {\n      const subjectSequence = getSubjectSequence(subject, sequences);\n      resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n    } else {\n      /**\n       * Find all the elements specified in the definition and parse value\n       * keyframes from their timeline definitions.\n       */\n      const elements = resolveElements(subject, scope, elementCache);\n      const numElements = elements.length;\n      /**\n       * For every element in this segment, process the defined values.\n       */\n      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n        /**\n         * Cast necessary, but we know these are of this type\n         */\n        keyframes = keyframes;\n        transition = transition;\n        const element = elements[elementIndex];\n        const subjectSequence = getSubjectSequence(element, sequences);\n        for (const key in keyframes) {\n          resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n        }\n      }\n      prevTime = currentTime;\n      currentTime += maxDuration;\n    }\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n  sequences.forEach((valueSequences, element) => {\n    for (const key in valueSequences) {\n      const valueSequence = valueSequences[key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n      valueSequence.sort(compareByTime);\n      const keyframes = [];\n      const valueOffset = [];\n      const valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n      for (let i = 0; i < valueSequence.length; i++) {\n        const {\n          at,\n          value,\n          easing\n        } = valueSequence[i];\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || \"easeOut\");\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(\"linear\");\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n      if (!animationDefinitions.has(element)) {\n        animationDefinitions.set(element, {\n          keyframes: {},\n          transition: {}\n        });\n      }\n      const definition = animationDefinitions.get(element);\n      definition.keyframes[key] = keyframes;\n      definition.transition[key] = {\n        ...defaultTransition,\n        duration: totalDuration,\n        ease: valueEasing,\n        times: valueOffset,\n        ...sequenceTransition\n      };\n    }\n  });\n  return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n  !sequences.has(subject) && sequences.set(subject, {});\n  return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n  return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n  return transition[key] ? {\n    ...transition,\n    ...transition[key]\n  } : {\n    ...transition\n  };\n}\nexport { createAnimationsFromSequence, getValueTransition };","map":{"version":3,"names":["resolveElements","defaultOffset","fillOffset","progress","isMotionValue","calcNextTime","addKeyframes","compareByTime","createAnimationsFromSequence","sequence","defaultTransition","sequenceTransition","arguments","length","undefined","scope","animationDefinitions","Map","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","segment","set","Array","isArray","name","at","subject","keyframes","transition","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numElements","valueKeyframesAsList","keyframesAsList","duration","ease","delay","startTime","targetTime","times","remainder","unshift","Math","max","subjectSequence","getSubjectSequence","getValueSequence","elements","element","key","getValueTransition","forEach","valueSequences","sort","valueOffset","valueEasing","value","easing","push","has","definition","get"],"sources":["D:/LEARNING/projects/SchoolWebApplication/frontend/node_modules/framer-motion/dist/es/animation/sequence/create.mjs"],"sourcesContent":["import { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { duration = defaultTransition.duration || 0.3, ease = defaultTransition.ease || \"easeOut\", } = valueTransition;\n            const delay = typeof valueTransition.delay === \"function\"\n                ? valueTransition.delay(elementIndex, numElements)\n                : valueTransition.delay || 0;\n            const startTime = currentTime + delay;\n            const targetTime = startTime + duration;\n            const { times = defaultOffset(valueKeyframesAsList) } = valueTransition;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(delay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            /**\n             * Find all the elements specified in the definition and parse value\n             * keyframes from their timeline definitions.\n             */\n            const elements = resolveElements(subject, scope, elementCache);\n            const numElements = elements.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const element = elements[elementIndex];\n                const subjectSequence = getSubjectSequence(element, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n                }\n            }\n            prevTime = currentTime;\n            currentTime += maxDuration;\n        }\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(\"linear\");\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition[key]\n        ? { ...transition, ...transition[key] }\n        : { ...transition };\n}\n\nexport { createAnimationsFromSequence, getValueTransition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}