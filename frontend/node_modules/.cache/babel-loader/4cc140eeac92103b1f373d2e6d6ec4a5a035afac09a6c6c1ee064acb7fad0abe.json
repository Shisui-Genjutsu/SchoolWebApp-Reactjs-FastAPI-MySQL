{"ast":null,"code":"import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nconst types = {\n  decay: inertia,\n  inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n  let duration = 0;\n  const timeStep = 50;\n  let state = generator.next(duration);\n  while (!state.done && duration < maxDuration) {\n    duration += timeStep;\n    state = generator.next(duration);\n  }\n  return duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue(_ref) {\n  let {\n    autoplay = true,\n    delay = 0,\n    driver = frameloopDriver,\n    keyframes: keyframes$1,\n    type = \"keyframes\",\n    repeat = 0,\n    repeatDelay = 0,\n    repeatType = \"loop\",\n    onPlay,\n    onStop,\n    onComplete,\n    onUpdate,\n    ...options\n  } = _ref;\n  let speed = 1;\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n  const updateFinishedPromise = () => {\n    resolveFinishedPromise && resolveFinishedPromise();\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  let animationDriver;\n  const generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n  let mapNumbersToKeyframes;\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n  const generator = generatorFactory({\n    ...options,\n    keyframes: keyframes$1\n  });\n  let mirroredGenerator;\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory({\n      ...options,\n      keyframes: [...keyframes$1].reverse(),\n      velocity: -(options.velocity || 0)\n    });\n  }\n  let playState = \"idle\";\n  let holdTime = null;\n  let startTime = null;\n  let cancelTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calculateDuration(generator);\n  }\n  const {\n    calculatedDuration\n  } = generator;\n  let resolvedDuration = Infinity;\n  let totalDuration = Infinity;\n  if (calculatedDuration !== null) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n  let time = 0;\n  const tick = timestamp => {\n    if (startTime === null) return;\n    if (holdTime !== null) {\n      time = holdTime;\n    } else {\n      time = (timestamp - startTime) * speed;\n    }\n    // Rebase on delay\n    time = Math.max(time - delay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n    if (playState === \"finished\" && holdTime === null) {\n      time = totalDuration;\n    }\n    let elapsed = time;\n    let frameGenerator = generator;\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      const progress = time / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n      let currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n      let iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      iterationProgress === 1 && currentIteration--;\n      currentIteration = Math.min(currentIteration, repeat + 1);\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n      const iterationIsOdd = Boolean(currentIteration % 2);\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n      let p = clamp(0, 1, iterationProgress);\n      if (time > totalDuration) {\n        p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n      }\n      elapsed = p * resolvedDuration;\n    }\n    const state = frameGenerator.next(elapsed);\n    if (mapNumbersToKeyframes) {\n      state.value = mapNumbersToKeyframes(state.value);\n    }\n    let {\n      done\n    } = state;\n    if (calculatedDuration !== null) {\n      done = time >= totalDuration;\n    }\n    const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done || speed < 0 && time <= 0);\n    if (onUpdate) {\n      onUpdate(state.value);\n    }\n    if (isAnimationFinished) {\n      finish();\n    }\n    return state;\n  };\n  const stopAnimationDriver = () => {\n    animationDriver && animationDriver.stop();\n    animationDriver = undefined;\n  };\n  const cancel = () => {\n    playState = \"idle\";\n    stopAnimationDriver();\n    updateFinishedPromise();\n    startTime = cancelTime = null;\n  };\n  const finish = () => {\n    playState = \"finished\";\n    onComplete && onComplete();\n    stopAnimationDriver();\n    updateFinishedPromise();\n  };\n  const play = () => {\n    if (hasStopped) return;\n    if (!animationDriver) animationDriver = driver(tick);\n    const now = animationDriver.now();\n    onPlay && onPlay();\n    playState = \"running\";\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime) {\n      // TODO When implementing play/pause, check WAAPI\n      // logic around finished animations\n      startTime = now;\n    }\n    cancelTime = startTime;\n    holdTime = null;\n    animationDriver.start();\n  };\n  if (autoplay) {\n    play();\n  }\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(time);\n    },\n    set time(newTime) {\n      newTime = secondsToMilliseconds(newTime);\n      time = newTime;\n      if (holdTime !== null || !animationDriver || speed === 0) {\n        holdTime = newTime;\n      } else {\n        startTime = animationDriver.now() - newTime / speed;\n      }\n    },\n    get speed() {\n      return speed;\n    },\n    set speed(newSpeed) {\n      if (newSpeed === speed || !animationDriver) return;\n      speed = newSpeed;\n      controls.time = millisecondsToSeconds(time);\n    },\n    get state() {\n      return playState;\n    },\n    play,\n    pause: () => {\n      playState = \"paused\";\n      holdTime = time;\n    },\n    stop: () => {\n      hasStopped = true;\n      if (playState === \"idle\") return;\n      playState = \"idle\";\n      onStop && onStop();\n      cancel();\n    },\n    cancel: () => {\n      if (cancelTime !== null) tick(cancelTime);\n      cancel();\n    },\n    complete: () => {\n      playState = \"finished\";\n    },\n    sample: elapsed => {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\nexport { animateValue };","map":{"version":3,"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","types","decay","tween","maxDuration","calculateDuration","generator","duration","timeStep","state","next","done","animateValue","_ref","autoplay","delay","driver","keyframes$1","type","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","options","speed","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","mirroredGenerator","reverse","velocity","playState","holdTime","startTime","cancelTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","time","tick","timestamp","Math","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","min","iterationIsOdd","Boolean","p","value","isAnimationFinished","finish","stopAnimationDriver","stop","undefined","cancel","play","now","start","controls","then","reject","newTime","newSpeed","pause","complete","sample"],"sources":["D:/LEARNING/projects/SchoolWebApplication/frontend/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs"],"sourcesContent":["import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calculateDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let time = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        if (holdTime !== null) {\n            time = holdTime;\n        }\n        else {\n            time = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        time = Math.max(time - delay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            time = totalDuration;\n        }\n        let elapsed = time;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = time / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (time > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        const state = frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (calculatedDuration !== null) {\n            done = time >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && time <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        playState = \"running\";\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime) {\n            // TODO When implementing play/pause, check WAAPI\n            // logic around finished animations\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(time);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            time = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(time);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = time;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}