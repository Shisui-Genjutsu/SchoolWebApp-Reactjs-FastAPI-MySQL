{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { appearStoreId } from './store-id.mjs';\nfunction handoffOptimizedAppearAnimation(id, name, value,\n/**\n * This function is loaded via window by startOptimisedAnimation.\n * By accepting `sync` as an argument, rather than using it via\n * import, it can be kept out of the first-load Framer bundle,\n * while also allowing this function to not be included in\n * Framer Motion bundles where it's not needed.\n */\nsync) {\n  const storeId = appearStoreId(id, transformProps.has(name) ? \"transform\" : name);\n  const appearAnimation = appearAnimationStore.get(storeId);\n  if (!appearAnimation) return 0;\n  const {\n    animation,\n    startTime\n  } = appearAnimation;\n  const cancelOptimisedAnimation = () => {\n    appearAnimationStore.delete(storeId);\n    /**\n     * Animation.cancel() throws so it needs to be wrapped in a try/catch\n     */\n    try {\n      animation.cancel();\n    } catch (e) {}\n  };\n  if (startTime !== null) {\n    const sampledTime = performance.now();\n    /**\n     * Resync handoff animation with optimised animation.\n     *\n     * This step would be unnecessary if we triggered animateChanges() in useEffect,\n     * but due to potential hydration errors we currently fire them in useLayoutEffect.\n     *\n     * By the time we're safely ready to cancel the optimised WAAPI animation,\n     * the main thread might have been blocked and desynced the two animations.\n     *\n     * Here, we resync the two animations before the optimised WAAPI animation is cancelled.\n     */\n    sync.update(() => {\n      if (value.animation) {\n        value.animation.time = performance.now() - millisecondsToSeconds(sampledTime);\n      }\n    });\n    /**\n     * We allow the animation to persist until the next frame:\n     *   1. So it continues to play until Framer Motion is ready to render\n     *      (avoiding a potential flash of the element's original state)\n     *   2. As all independent transforms share a single transform animation, stopping\n     *      it synchronously would prevent subsequent transforms from handing off.\n     */\n    sync.render(cancelOptimisedAnimation);\n    /**\n     * We use main thread timings vs those returned by Animation.currentTime as it\n     * can be the case, particularly in Firefox, that currentTime doesn't return\n     * an updated value for several frames, even as the animation plays smoothly via\n     * the GPU.\n     */\n    return sampledTime - startTime || 0;\n  } else {\n    cancelOptimisedAnimation();\n    return 0;\n  }\n}\nexport { handoffOptimizedAppearAnimation };","map":{"version":3,"names":["transformProps","millisecondsToSeconds","appearAnimationStore","appearStoreId","handoffOptimizedAppearAnimation","id","name","value","sync","storeId","has","appearAnimation","get","animation","startTime","cancelOptimisedAnimation","delete","cancel","e","sampledTime","performance","now","update","time","render"],"sources":["D:/LEARNING/projects/SchoolWebApplication/frontend/node_modules/framer-motion/dist/es/animation/optimized-appear/handoff.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { appearStoreId } from './store-id.mjs';\n\nfunction handoffOptimizedAppearAnimation(id, name, value, \n/**\n * This function is loaded via window by startOptimisedAnimation.\n * By accepting `sync` as an argument, rather than using it via\n * import, it can be kept out of the first-load Framer bundle,\n * while also allowing this function to not be included in\n * Framer Motion bundles where it's not needed.\n */\nsync) {\n    const storeId = appearStoreId(id, transformProps.has(name) ? \"transform\" : name);\n    const appearAnimation = appearAnimationStore.get(storeId);\n    if (!appearAnimation)\n        return 0;\n    const { animation, startTime } = appearAnimation;\n    const cancelOptimisedAnimation = () => {\n        appearAnimationStore.delete(storeId);\n        /**\n         * Animation.cancel() throws so it needs to be wrapped in a try/catch\n         */\n        try {\n            animation.cancel();\n        }\n        catch (e) { }\n    };\n    if (startTime !== null) {\n        const sampledTime = performance.now();\n        /**\n         * Resync handoff animation with optimised animation.\n         *\n         * This step would be unnecessary if we triggered animateChanges() in useEffect,\n         * but due to potential hydration errors we currently fire them in useLayoutEffect.\n         *\n         * By the time we're safely ready to cancel the optimised WAAPI animation,\n         * the main thread might have been blocked and desynced the two animations.\n         *\n         * Here, we resync the two animations before the optimised WAAPI animation is cancelled.\n         */\n        sync.update(() => {\n            if (value.animation) {\n                value.animation.time =\n                    performance.now() - millisecondsToSeconds(sampledTime);\n            }\n        });\n        /**\n         * We allow the animation to persist until the next frame:\n         *   1. So it continues to play until Framer Motion is ready to render\n         *      (avoiding a potential flash of the element's original state)\n         *   2. As all independent transforms share a single transform animation, stopping\n         *      it synchronously would prevent subsequent transforms from handing off.\n         */\n        sync.render(cancelOptimisedAnimation);\n        /**\n         * We use main thread timings vs those returned by Animation.currentTime as it\n         * can be the case, particularly in Firefox, that currentTime doesn't return\n         * an updated value for several frames, even as the animation plays smoothly via\n         * the GPU.\n         */\n        return sampledTime - startTime || 0;\n    }\n    else {\n        cancelOptimisedAnimation();\n        return 0;\n    }\n}\n\nexport { handoffOptimizedAppearAnimation };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uCAAuC;AACtE,SAASC,qBAAqB,QAAQ,iCAAiC;AACvE,SAASC,oBAAoB,QAAQ,aAAa;AAClD,SAASC,aAAa,QAAQ,gBAAgB;AAE9C,SAASC,+BAA+BA,CAACC,EAAE,EAAEC,IAAI,EAAEC,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAI,EAAE;EACF,MAAMC,OAAO,GAAGN,aAAa,CAACE,EAAE,EAAEL,cAAc,CAACU,GAAG,CAACJ,IAAI,CAAC,GAAG,WAAW,GAAGA,IAAI,CAAC;EAChF,MAAMK,eAAe,GAAGT,oBAAoB,CAACU,GAAG,CAACH,OAAO,CAAC;EACzD,IAAI,CAACE,eAAe,EAChB,OAAO,CAAC;EACZ,MAAM;IAAEE,SAAS;IAAEC;EAAU,CAAC,GAAGH,eAAe;EAChD,MAAMI,wBAAwB,GAAGA,CAAA,KAAM;IACnCb,oBAAoB,CAACc,MAAM,CAACP,OAAO,CAAC;IACpC;AACR;AACA;IACQ,IAAI;MACAI,SAAS,CAACI,MAAM,EAAE;IACtB,CAAC,CACD,OAAOC,CAAC,EAAE,CAAE;EAChB,CAAC;EACD,IAAIJ,SAAS,KAAK,IAAI,EAAE;IACpB,MAAMK,WAAW,GAAGC,WAAW,CAACC,GAAG,EAAE;IACrC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQb,IAAI,CAACc,MAAM,CAAC,MAAM;MACd,IAAIf,KAAK,CAACM,SAAS,EAAE;QACjBN,KAAK,CAACM,SAAS,CAACU,IAAI,GAChBH,WAAW,CAACC,GAAG,EAAE,GAAGpB,qBAAqB,CAACkB,WAAW,CAAC;MAC9D;IACJ,CAAC,CAAC;IACF;AACR;AACA;AACA;AACA;AACA;AACA;IACQX,IAAI,CAACgB,MAAM,CAACT,wBAAwB,CAAC;IACrC;AACR;AACA;AACA;AACA;AACA;IACQ,OAAOI,WAAW,GAAGL,SAAS,IAAI,CAAC;EACvC,CAAC,MACI;IACDC,wBAAwB,EAAE;IAC1B,OAAO,CAAC;EACZ;AACJ;AAEA,SAASX,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}